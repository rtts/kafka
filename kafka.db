--
-- PostgreSQL database dump
--

-- Dumped from database version 9.6.3
-- Dumped by pg_dump version 9.6.3

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: auth_group; Type: TABLE; Schema: public; Owner: kafka
--

CREATE TABLE auth_group (
    id integer NOT NULL,
    name character varying(80) NOT NULL
);


ALTER TABLE auth_group OWNER TO kafka;

--
-- Name: auth_group_id_seq; Type: SEQUENCE; Schema: public; Owner: kafka
--

CREATE SEQUENCE auth_group_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE auth_group_id_seq OWNER TO kafka;

--
-- Name: auth_group_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kafka
--

ALTER SEQUENCE auth_group_id_seq OWNED BY auth_group.id;


--
-- Name: auth_group_permissions; Type: TABLE; Schema: public; Owner: kafka
--

CREATE TABLE auth_group_permissions (
    id integer NOT NULL,
    group_id integer NOT NULL,
    permission_id integer NOT NULL
);


ALTER TABLE auth_group_permissions OWNER TO kafka;

--
-- Name: auth_group_permissions_id_seq; Type: SEQUENCE; Schema: public; Owner: kafka
--

CREATE SEQUENCE auth_group_permissions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE auth_group_permissions_id_seq OWNER TO kafka;

--
-- Name: auth_group_permissions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kafka
--

ALTER SEQUENCE auth_group_permissions_id_seq OWNED BY auth_group_permissions.id;


--
-- Name: auth_permission; Type: TABLE; Schema: public; Owner: kafka
--

CREATE TABLE auth_permission (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    content_type_id integer NOT NULL,
    codename character varying(100) NOT NULL
);


ALTER TABLE auth_permission OWNER TO kafka;

--
-- Name: auth_permission_id_seq; Type: SEQUENCE; Schema: public; Owner: kafka
--

CREATE SEQUENCE auth_permission_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE auth_permission_id_seq OWNER TO kafka;

--
-- Name: auth_permission_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kafka
--

ALTER SEQUENCE auth_permission_id_seq OWNED BY auth_permission.id;


--
-- Name: auth_user; Type: TABLE; Schema: public; Owner: kafka
--

CREATE TABLE auth_user (
    id integer NOT NULL,
    password character varying(128) NOT NULL,
    last_login timestamp with time zone,
    is_superuser boolean NOT NULL,
    username character varying(150) NOT NULL,
    first_name character varying(30) NOT NULL,
    last_name character varying(30) NOT NULL,
    email character varying(254) NOT NULL,
    is_staff boolean NOT NULL,
    is_active boolean NOT NULL,
    date_joined timestamp with time zone NOT NULL
);


ALTER TABLE auth_user OWNER TO kafka;

--
-- Name: auth_user_groups; Type: TABLE; Schema: public; Owner: kafka
--

CREATE TABLE auth_user_groups (
    id integer NOT NULL,
    user_id integer NOT NULL,
    group_id integer NOT NULL
);


ALTER TABLE auth_user_groups OWNER TO kafka;

--
-- Name: auth_user_groups_id_seq; Type: SEQUENCE; Schema: public; Owner: kafka
--

CREATE SEQUENCE auth_user_groups_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE auth_user_groups_id_seq OWNER TO kafka;

--
-- Name: auth_user_groups_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kafka
--

ALTER SEQUENCE auth_user_groups_id_seq OWNED BY auth_user_groups.id;


--
-- Name: auth_user_id_seq; Type: SEQUENCE; Schema: public; Owner: kafka
--

CREATE SEQUENCE auth_user_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE auth_user_id_seq OWNER TO kafka;

--
-- Name: auth_user_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kafka
--

ALTER SEQUENCE auth_user_id_seq OWNED BY auth_user.id;


--
-- Name: auth_user_user_permissions; Type: TABLE; Schema: public; Owner: kafka
--

CREATE TABLE auth_user_user_permissions (
    id integer NOT NULL,
    user_id integer NOT NULL,
    permission_id integer NOT NULL
);


ALTER TABLE auth_user_user_permissions OWNER TO kafka;

--
-- Name: auth_user_user_permissions_id_seq; Type: SEQUENCE; Schema: public; Owner: kafka
--

CREATE SEQUENCE auth_user_user_permissions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE auth_user_user_permissions_id_seq OWNER TO kafka;

--
-- Name: auth_user_user_permissions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kafka
--

ALTER SEQUENCE auth_user_user_permissions_id_seq OWNED BY auth_user_user_permissions.id;


--
-- Name: django_admin_log; Type: TABLE; Schema: public; Owner: kafka
--

CREATE TABLE django_admin_log (
    id integer NOT NULL,
    action_time timestamp with time zone NOT NULL,
    object_id text,
    object_repr character varying(200) NOT NULL,
    action_flag smallint NOT NULL,
    change_message text NOT NULL,
    content_type_id integer,
    user_id integer NOT NULL,
    CONSTRAINT django_admin_log_action_flag_check CHECK ((action_flag >= 0))
);


ALTER TABLE django_admin_log OWNER TO kafka;

--
-- Name: django_admin_log_id_seq; Type: SEQUENCE; Schema: public; Owner: kafka
--

CREATE SEQUENCE django_admin_log_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE django_admin_log_id_seq OWNER TO kafka;

--
-- Name: django_admin_log_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kafka
--

ALTER SEQUENCE django_admin_log_id_seq OWNED BY django_admin_log.id;


--
-- Name: django_content_type; Type: TABLE; Schema: public; Owner: kafka
--

CREATE TABLE django_content_type (
    id integer NOT NULL,
    app_label character varying(100) NOT NULL,
    model character varying(100) NOT NULL
);


ALTER TABLE django_content_type OWNER TO kafka;

--
-- Name: django_content_type_id_seq; Type: SEQUENCE; Schema: public; Owner: kafka
--

CREATE SEQUENCE django_content_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE django_content_type_id_seq OWNER TO kafka;

--
-- Name: django_content_type_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kafka
--

ALTER SEQUENCE django_content_type_id_seq OWNED BY django_content_type.id;


--
-- Name: django_migrations; Type: TABLE; Schema: public; Owner: kafka
--

CREATE TABLE django_migrations (
    id integer NOT NULL,
    app character varying(255) NOT NULL,
    name character varying(255) NOT NULL,
    applied timestamp with time zone NOT NULL
);


ALTER TABLE django_migrations OWNER TO kafka;

--
-- Name: django_migrations_id_seq; Type: SEQUENCE; Schema: public; Owner: kafka
--

CREATE SEQUENCE django_migrations_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE django_migrations_id_seq OWNER TO kafka;

--
-- Name: django_migrations_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kafka
--

ALTER SEQUENCE django_migrations_id_seq OWNED BY django_migrations.id;


--
-- Name: django_session; Type: TABLE; Schema: public; Owner: kafka
--

CREATE TABLE django_session (
    session_key character varying(40) NOT NULL,
    session_data text NOT NULL,
    expire_date timestamp with time zone NOT NULL
);


ALTER TABLE django_session OWNER TO kafka;

--
-- Name: kafka_config; Type: TABLE; Schema: public; Owner: kafka
--

CREATE TABLE kafka_config (
    id integer NOT NULL,
    parameter integer NOT NULL,
    content text NOT NULL,
    CONSTRAINT kafka_config_parameter_check CHECK ((parameter >= 0))
);


ALTER TABLE kafka_config OWNER TO kafka;

--
-- Name: kafka_config_id_seq; Type: SEQUENCE; Schema: public; Owner: kafka
--

CREATE SEQUENCE kafka_config_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE kafka_config_id_seq OWNER TO kafka;

--
-- Name: kafka_config_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kafka
--

ALTER SEQUENCE kafka_config_id_seq OWNED BY kafka_config.id;


--
-- Name: kafka_event; Type: TABLE; Schema: public; Owner: kafka
--

CREATE TABLE kafka_event (
    id integer NOT NULL,
    date date NOT NULL,
    title character varying(255) NOT NULL
);


ALTER TABLE kafka_event OWNER TO kafka;

--
-- Name: kafka_event_id_seq; Type: SEQUENCE; Schema: public; Owner: kafka
--

CREATE SEQUENCE kafka_event_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE kafka_event_id_seq OWNER TO kafka;

--
-- Name: kafka_event_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kafka
--

ALTER SEQUENCE kafka_event_id_seq OWNED BY kafka_event.id;


--
-- Name: kafka_news; Type: TABLE; Schema: public; Owner: kafka
--

CREATE TABLE kafka_news (
    id integer NOT NULL,
    date date NOT NULL,
    contents text NOT NULL,
    link character varying(200) NOT NULL
);


ALTER TABLE kafka_news OWNER TO kafka;

--
-- Name: kafka_news_id_seq; Type: SEQUENCE; Schema: public; Owner: kafka
--

CREATE SEQUENCE kafka_news_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE kafka_news_id_seq OWNER TO kafka;

--
-- Name: kafka_news_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kafka
--

ALTER SEQUENCE kafka_news_id_seq OWNED BY kafka_news.id;


--
-- Name: kafka_page; Type: TABLE; Schema: public; Owner: kafka
--

CREATE TABLE kafka_page (
    id integer NOT NULL,
    "position" integer NOT NULL,
    title character varying(255) NOT NULL,
    slug character varying(50) NOT NULL,
    menu boolean NOT NULL,
    CONSTRAINT kafka_page_position_check CHECK (("position" >= 0))
);


ALTER TABLE kafka_page OWNER TO kafka;

--
-- Name: kafka_page_id_seq; Type: SEQUENCE; Schema: public; Owner: kafka
--

CREATE SEQUENCE kafka_page_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE kafka_page_id_seq OWNER TO kafka;

--
-- Name: kafka_page_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kafka
--

ALTER SEQUENCE kafka_page_id_seq OWNED BY kafka_page.id;


--
-- Name: kafka_section; Type: TABLE; Schema: public; Owner: kafka
--

CREATE TABLE kafka_section (
    id integer NOT NULL,
    "position" integer NOT NULL,
    title character varying(255) NOT NULL,
    contents text NOT NULL,
    page_id integer NOT NULL,
    type character varying(32) NOT NULL,
    CONSTRAINT kafka_section_position_check CHECK (("position" >= 0))
);


ALTER TABLE kafka_section OWNER TO kafka;

--
-- Name: kafka_section_id_seq; Type: SEQUENCE; Schema: public; Owner: kafka
--

CREATE SEQUENCE kafka_section_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE kafka_section_id_seq OWNER TO kafka;

--
-- Name: kafka_section_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kafka
--

ALTER SEQUENCE kafka_section_id_seq OWNED BY kafka_section.id;


--
-- Name: kafka_worksession; Type: TABLE; Schema: public; Owner: kafka
--

CREATE TABLE kafka_worksession (
    id integer NOT NULL,
    documentation text NOT NULL,
    event_id integer,
    title character varying(255) NOT NULL
);


ALTER TABLE kafka_worksession OWNER TO kafka;

--
-- Name: kafka_worksession_id_seq; Type: SEQUENCE; Schema: public; Owner: kafka
--

CREATE SEQUENCE kafka_worksession_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE kafka_worksession_id_seq OWNER TO kafka;

--
-- Name: kafka_worksession_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kafka
--

ALTER SEQUENCE kafka_worksession_id_seq OWNED BY kafka_worksession.id;


--
-- Name: auth_group id; Type: DEFAULT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY auth_group ALTER COLUMN id SET DEFAULT nextval('auth_group_id_seq'::regclass);


--
-- Name: auth_group_permissions id; Type: DEFAULT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY auth_group_permissions ALTER COLUMN id SET DEFAULT nextval('auth_group_permissions_id_seq'::regclass);


--
-- Name: auth_permission id; Type: DEFAULT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY auth_permission ALTER COLUMN id SET DEFAULT nextval('auth_permission_id_seq'::regclass);


--
-- Name: auth_user id; Type: DEFAULT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY auth_user ALTER COLUMN id SET DEFAULT nextval('auth_user_id_seq'::regclass);


--
-- Name: auth_user_groups id; Type: DEFAULT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY auth_user_groups ALTER COLUMN id SET DEFAULT nextval('auth_user_groups_id_seq'::regclass);


--
-- Name: auth_user_user_permissions id; Type: DEFAULT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY auth_user_user_permissions ALTER COLUMN id SET DEFAULT nextval('auth_user_user_permissions_id_seq'::regclass);


--
-- Name: django_admin_log id; Type: DEFAULT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY django_admin_log ALTER COLUMN id SET DEFAULT nextval('django_admin_log_id_seq'::regclass);


--
-- Name: django_content_type id; Type: DEFAULT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY django_content_type ALTER COLUMN id SET DEFAULT nextval('django_content_type_id_seq'::regclass);


--
-- Name: django_migrations id; Type: DEFAULT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY django_migrations ALTER COLUMN id SET DEFAULT nextval('django_migrations_id_seq'::regclass);


--
-- Name: kafka_config id; Type: DEFAULT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY kafka_config ALTER COLUMN id SET DEFAULT nextval('kafka_config_id_seq'::regclass);


--
-- Name: kafka_event id; Type: DEFAULT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY kafka_event ALTER COLUMN id SET DEFAULT nextval('kafka_event_id_seq'::regclass);


--
-- Name: kafka_news id; Type: DEFAULT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY kafka_news ALTER COLUMN id SET DEFAULT nextval('kafka_news_id_seq'::regclass);


--
-- Name: kafka_page id; Type: DEFAULT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY kafka_page ALTER COLUMN id SET DEFAULT nextval('kafka_page_id_seq'::regclass);


--
-- Name: kafka_section id; Type: DEFAULT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY kafka_section ALTER COLUMN id SET DEFAULT nextval('kafka_section_id_seq'::regclass);


--
-- Name: kafka_worksession id; Type: DEFAULT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY kafka_worksession ALTER COLUMN id SET DEFAULT nextval('kafka_worksession_id_seq'::regclass);


--
-- Data for Name: auth_group; Type: TABLE DATA; Schema: public; Owner: kafka
--

COPY auth_group (id, name) FROM stdin;
\.


--
-- Name: auth_group_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kafka
--

SELECT pg_catalog.setval('auth_group_id_seq', 1, false);


--
-- Data for Name: auth_group_permissions; Type: TABLE DATA; Schema: public; Owner: kafka
--

COPY auth_group_permissions (id, group_id, permission_id) FROM stdin;
\.


--
-- Name: auth_group_permissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kafka
--

SELECT pg_catalog.setval('auth_group_permissions_id_seq', 1, false);


--
-- Data for Name: auth_permission; Type: TABLE DATA; Schema: public; Owner: kafka
--

COPY auth_permission (id, name, content_type_id, codename) FROM stdin;
1	Can add Pagina	1	add_page
2	Can change Pagina	1	change_page
3	Can delete Pagina	1	delete_page
4	Can add Parameter	2	add_config
5	Can change Parameter	2	change_config
6	Can delete Parameter	2	delete_config
7	Can add sectie	3	add_section
8	Can change sectie	3	change_section
9	Can delete sectie	3	delete_section
10	Can add log entry	4	add_logentry
11	Can change log entry	4	change_logentry
12	Can delete log entry	4	delete_logentry
13	Can add permission	5	add_permission
14	Can change permission	5	change_permission
15	Can delete permission	5	delete_permission
16	Can add group	6	add_group
17	Can change group	6	change_group
18	Can delete group	6	delete_group
19	Can add user	7	add_user
20	Can change user	7	change_user
21	Can delete user	7	delete_user
22	Can add content type	8	add_contenttype
23	Can change content type	8	change_contenttype
24	Can delete content type	8	delete_contenttype
25	Can add session	9	add_session
26	Can change session	9	change_session
27	Can delete session	9	delete_session
28	Can add Werksessie	10	add_worksession
29	Can change Werksessie	10	change_worksession
30	Can delete Werksessie	10	delete_worksession
31	Can add Evenement	11	add_event
32	Can change Evenement	11	change_event
33	Can delete Evenement	11	delete_event
34	Can add Nieuwsbericht	12	add_news
35	Can change Nieuwsbericht	12	change_news
36	Can delete Nieuwsbericht	12	delete_news
\.


--
-- Name: auth_permission_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kafka
--

SELECT pg_catalog.setval('auth_permission_id_seq', 36, true);


--
-- Data for Name: auth_user; Type: TABLE DATA; Schema: public; Owner: kafka
--

COPY auth_user (id, password, last_login, is_superuser, username, first_name, last_name, email, is_staff, is_active, date_joined) FROM stdin;
2	pbkdf2_sha256$36000$8U8EsL1tG8ac$3s/Ntrem+YlX50bc8mOTB2YSBJWSqVYuE/LdHOLlfug=	2017-09-12 13:40:22.073862+02	t	klaas	Klaas	Burger	info@klaasburger.com	t	t	2017-09-11 21:40:37+02
1	pbkdf2_sha256$36000$vnsyjJrUUB8J$Pp7WqD87EXxxflnBlr5lLNWB8Z0HUVsLuWpA8eIrSMM=	2017-09-14 10:31:39.620551+02	t	jj			jj@returntothesource.nl	t	t	2017-09-11 21:40:07.847297+02
\.


--
-- Data for Name: auth_user_groups; Type: TABLE DATA; Schema: public; Owner: kafka
--

COPY auth_user_groups (id, user_id, group_id) FROM stdin;
\.


--
-- Name: auth_user_groups_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kafka
--

SELECT pg_catalog.setval('auth_user_groups_id_seq', 1, false);


--
-- Name: auth_user_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kafka
--

SELECT pg_catalog.setval('auth_user_id_seq', 2, true);


--
-- Data for Name: auth_user_user_permissions; Type: TABLE DATA; Schema: public; Owner: kafka
--

COPY auth_user_user_permissions (id, user_id, permission_id) FROM stdin;
\.


--
-- Name: auth_user_user_permissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kafka
--

SELECT pg_catalog.setval('auth_user_user_permissions_id_seq', 1, false);


--
-- Data for Name: django_admin_log; Type: TABLE DATA; Schema: public; Owner: kafka
--

COPY django_admin_log (id, action_time, object_id, object_repr, action_flag, change_message, content_type_id, user_id) FROM stdin;
1	2017-09-11 21:40:37.933575+02	2	klaas	1	[{"added": {}}]	7	1
2	2017-09-11 21:41:17.09494+02	2	klaas	2	[{"changed": {"fields": ["first_name", "last_name", "email", "is_staff", "is_superuser"]}}]	7	1
3	2017-09-11 21:42:57.482603+02	1	1. Homepage	1	[{"added": {}}, {"added": {"name": "sectie", "object": "Sectie: #1 "}}, {"added": {"name": "sectie", "object": "Sectie: #2 Programma Graphic Matters Breda"}}, {"added": {"name": "sectie", "object": "Sectie: #3 "}}]	1	1
4	2017-09-11 21:49:59.718628+02	1	1. Homepage	2	[]	1	2
5	2017-09-11 22:17:32.430496+02	1	Graphic Matters	1	[{"added": {}}]	11	2
6	2017-09-13 15:48:01.39112+02	1	1. Homepage	2	[{"changed": {"object": "Sectie: #1 ", "fields": ["contents"], "name": "sectie"}}]	1	2
7	2017-09-13 15:50:20.650876+02	1	1. Homepage	2	[{"changed": {"object": "Sectie: #1 ", "fields": ["contents"], "name": "sectie"}}]	1	2
8	2017-09-13 15:51:04.171457+02	1	1. Homepage	2	[{"changed": {"object": "Sectie: #1 ", "fields": ["contents"], "name": "sectie"}}]	1	2
9	2017-09-13 15:51:43.971493+02	1	1. Homepage	2	[{"changed": {"object": "Sectie: #1 ", "fields": ["contents"], "name": "sectie"}}]	1	2
10	2017-09-13 15:52:59.368296+02	1	1. Homepage	2	[{"changed": {"object": "Sectie: #1 Camping Kafka: Weg in Eigen Land", "fields": ["title"], "name": "sectie"}}]	1	2
11	2017-09-13 15:53:48.958496+02	1	1. Homepage	2	[{"changed": {"object": "Sectie: #3 ", "fields": ["contents"], "name": "sectie"}}]	1	2
12	2017-09-13 15:55:39.499616+02	1	1. Homepage	2	[{"changed": {"object": "Sectie: #1 Camping Kafka: Weg in Eigen Land", "fields": ["contents"], "name": "sectie"}}]	1	2
13	2017-09-13 15:57:15.744958+02	1	1. Homepage	2	[{"changed": {"object": "Sectie: #1 Camping Kafka: Weg in Eigen Land", "fields": ["contents"], "name": "sectie"}}]	1	2
14	2017-09-13 15:58:41.640662+02	1	1. Homepage	2	[{"changed": {"object": "Sectie: #1 Camping Kafka: Weg in Eigen Land", "fields": ["contents"], "name": "sectie"}}]	1	2
15	2017-09-13 16:02:06.372268+02	1	1. Homepage	2	[{"changed": {"object": "Sectie: #2 Programma Graphic Matters Breda", "fields": ["contents"], "name": "sectie"}}]	1	2
16	2017-09-13 16:11:38.13801+02	1	1. Homepage	2	[{"changed": {"object": "Sectie: #3 ", "fields": ["contents"], "name": "sectie"}}]	1	2
17	2017-09-13 17:02:27.451357+02	1	1. Homepage	2	[{"changed": {"object": "Sectie: #1 Camping Kafka: Weg in Eigen Land", "fields": ["contents"], "name": "sectie"}}]	1	2
\.


--
-- Name: django_admin_log_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kafka
--

SELECT pg_catalog.setval('django_admin_log_id_seq', 17, true);


--
-- Data for Name: django_content_type; Type: TABLE DATA; Schema: public; Owner: kafka
--

COPY django_content_type (id, app_label, model) FROM stdin;
1	kafka	page
2	kafka	config
3	kafka	section
4	admin	logentry
5	auth	permission
6	auth	group
7	auth	user
8	contenttypes	contenttype
9	sessions	session
10	kafka	worksession
11	kafka	event
12	kafka	news
\.


--
-- Name: django_content_type_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kafka
--

SELECT pg_catalog.setval('django_content_type_id_seq', 12, true);


--
-- Data for Name: django_migrations; Type: TABLE DATA; Schema: public; Owner: kafka
--

COPY django_migrations (id, app, name, applied) FROM stdin;
1	contenttypes	0001_initial	2017-09-11 21:37:22.060382+02
2	auth	0001_initial	2017-09-11 21:37:22.252905+02
3	admin	0001_initial	2017-09-11 21:37:22.337559+02
4	admin	0002_logentry_remove_auto_add	2017-09-11 21:37:22.36177+02
5	contenttypes	0002_remove_content_type_name	2017-09-11 21:37:22.405629+02
6	auth	0002_alter_permission_name_max_length	2017-09-11 21:37:22.421549+02
7	auth	0003_alter_user_email_max_length	2017-09-11 21:37:22.466477+02
8	auth	0004_alter_user_username_opts	2017-09-11 21:37:22.511205+02
9	auth	0005_alter_user_last_login_null	2017-09-11 21:37:22.543901+02
10	auth	0006_require_contenttypes_0002	2017-09-11 21:37:22.557653+02
11	auth	0007_alter_validators_add_error_messages	2017-09-11 21:37:22.597234+02
12	auth	0008_alter_user_username_max_length	2017-09-11 21:37:22.651353+02
13	kafka	0001_initial	2017-09-11 21:37:22.713305+02
14	kafka	0002_auto_20170911_2110	2017-09-11 21:37:22.749619+02
15	kafka	0003_section_type	2017-09-11 21:37:22.783483+02
16	sessions	0001_initial	2017-09-11 21:37:22.818845+02
17	kafka	0004_auto_20170911_2201	2017-09-11 22:15:28.07138+02
18	kafka	0005_auto_20170911_2213	2017-09-11 22:15:28.133819+02
\.


--
-- Name: django_migrations_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kafka
--

SELECT pg_catalog.setval('django_migrations_id_seq', 18, true);


--
-- Data for Name: django_session; Type: TABLE DATA; Schema: public; Owner: kafka
--

COPY django_session (session_key, session_data, expire_date) FROM stdin;
g1ravllkzlrbg7tae18yhk0jqjwusp4t	Nzg2NjZlNjgwMWRiNjcxN2QyYWM4MTY3YzIxOGU3YjYyYjg1Y2QzNzp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiOGZiNmY4MzE4OWYzZWJhNDBiNzk2NjMzMThlNTg0NWJkNmYyNTFjZCIsIl9hdXRoX3VzZXJfaWQiOiIyIn0=	2017-09-25 21:49:50.868269+02
p18202b3d97fkfiz92c3aa2wu6ihtub7	NjViMGIwYmQyZWVmMzIyMjI5MmViMzUzZmM2ZWFjYTY1MzlmMTNkYTp7Il9hdXRoX3VzZXJfaWQiOiIyIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiI4ZmI2ZjgzMTg5ZjNlYmE0MGI3OTY2MzMxOGU1ODQ1YmQ2ZjI1MWNkIn0=	2017-09-26 13:40:22.079972+02
pjyhz9yjy1xi6vyfc577nyp7n84rakof	ZDEzMjczY2QyMjE0YTJlYjQ1NWY2NzI5Y2JiYTA0ODI2MTk5NGUyZjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiI1YzIwMTRiZmYzNTFmZWNjNzQyNmNkZTlhODQ0N2QyM2RjYjZmODUzIn0=	2017-09-28 10:31:39.625858+02
\.


--
-- Data for Name: kafka_config; Type: TABLE DATA; Schema: public; Owner: kafka
--

COPY kafka_config (id, parameter, content) FROM stdin;
\.


--
-- Name: kafka_config_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kafka
--

SELECT pg_catalog.setval('kafka_config_id_seq', 1, false);


--
-- Data for Name: kafka_event; Type: TABLE DATA; Schema: public; Owner: kafka
--

COPY kafka_event (id, date, title) FROM stdin;
1	2017-09-22	Graphic Matters
\.


--
-- Name: kafka_event_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kafka
--

SELECT pg_catalog.setval('kafka_event_id_seq', 1, true);


--
-- Data for Name: kafka_news; Type: TABLE DATA; Schema: public; Owner: kafka
--

COPY kafka_news (id, date, contents, link) FROM stdin;
\.


--
-- Name: kafka_news_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kafka
--

SELECT pg_catalog.setval('kafka_news_id_seq', 1, false);


--
-- Data for Name: kafka_page; Type: TABLE DATA; Schema: public; Owner: kafka
--

COPY kafka_page (id, "position", title, slug, menu) FROM stdin;
1	1	Homepage		t
\.


--
-- Name: kafka_page_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kafka
--

SELECT pg_catalog.setval('kafka_page_id_seq', 1, true);


--
-- Data for Name: kafka_section; Type: TABLE DATA; Schema: public; Owner: kafka
--

COPY kafka_section (id, "position", title, contents, page_id, type) FROM stdin;
2	2	Programma Graphic Matters Breda	<p><strong>TESTCASE 1: ALTERNATIEVE WOONVORMEN</strong><br />\r\n<em>Vrijdag 29 september 15:30 &ndash; 17:00.</em><br />\r\nNa het nieuwe werken komt nu ook het nieuwe wonen: tijdelijke, kleinschalige, kapitaalarme of milieuvriendelijke woonvormen bieden ruimte in een oververhitte<br />\r\nwoonmarkt. Maar zoals bij alle vernieuwing loopt wetgeving achter. Tiny House enthousiastelingen zoeken daarom hun heil op campings of andere vrijplaatsen.</p>\r\n\r\n<p><strong>TESTCASE 2: 365 DAGEN RECRE&Euml;REN</strong><br />\r\n<em>Vrijdag 6 oktober 15:30 &ndash; 17:00</em><br />\r\nBen je met pensioen? Dan zit je toch liever in het groen dan in een betonnen appartement? Veel campingbewoners zijn 65-plus: ze hebben niet zoveel te zoeken in de drukke stad. Maar is de camping nog wel in staat een nieuw publiek te trekken? Hoe houden eigenaren hun vakantieparken toekomstbestendig?</p>\r\n\r\n<p><strong>TESTCASE 3: VASTGELOPEN</strong><br />\r\n<em>Vrijdag 13 oktober 15:30 &ndash; 17:00</em><br />\r\nZoek je snel nieuwe woonruimte? Een stacaravan is zo gevonden na een relatiebreuk, plotselinge verhuizing of schuldencrisis. Maar dan beginnen de problemen: wonen op een camping is niet toegestaan, je kunt je er niet zomaar registreren. Contact met de belastingdienst wordt opeens een stuk ingewikkelder en schuldeisers kunnen je niet meer vinden.</p>\r\n\r\n<p><strong>TESTCASE 4: ARBEIDSMIGRANTEN</strong><br />\r\n<em>Vrijdag 20 oktober 15:30 &ndash; 17:00</em><br />\r\nDe industrie van de regio Zuidwest-Brabant leunt zwaar op buitenlandse arbeiders. Maar waar woont dit personeel? Tijdelijke huisvesting is moeilijk te vinden en de verdienmodellen van uitzendbureaus houden niet altijd rekening met persoonlijke&nbsp; belangen. Wat als een armoedige stacaravan nog altijd beter is dan de situatie in het land van herkomst?</p>\r\n\r\n<p><em>Alle bijeenkomsten tijdens Graphic Matters zijn gratis<br />\r\nen publiekelijk toegankelijk. Van elke testcase wordt een<br />\r\nvideo- en audioregistratie gemaakt.</em></p>\r\n\r\n<p>Adres: Parade 12, Breda. Gratis toegang.</p>	1	program
3	3		<p><em>Camping Kafka: Weg in Eigen Land </em>komt tot stand in samenwerking met Gemeente Breda, The Art of Impact, Graphic Matters, GGD West-Brabant, Provincie Noord-Brabant, Welzijn Divers, Diaconaal Centrum Annahuis, STRAATRAAD, Pakhuis B, campingbewoners en -eigenaren en vele anderen.</p>\r\n\r\n<p>&copy; Academie voor Beeldvorming 2017</p>	1	footer
1	1	Camping Kafka: Weg in Eigen Land	<p><strong>&quot;Mijn vrouw en ik zijn uit elkaar. Zij zit met de kinderen in ons huis.&quot; &quot;We hebben ons huis met verlies moeten verkopen.&quot; &quot;We willen weg uit de ratrace. Hier fluiten de vogels als we wakker worden.&quot; &quot;Thuis? Ik heb geen thuis. Dit is alles wat ik heb!&quot;</strong></p>\r\n\r\n<p><em>Woud van regels</em><br />\r\nNergens ter wereld zijn zoveel vakantieparken als in Nederland. Vroeger waren ze bedoeld als recreatieterreinen voor gezinnen. Tegenwoordig zijn vliegvakanties voor iedereen betaalbaar. Steeds vaker worden zomerhuisjes, stacaravans en vakantiebungalows permanent bewoond door burgers die verdwalen in een woud van regels. Camping Kafka laat zien hoe onze samenleving werkt, en zoekt in open werksessies samen met hedendaagse campingbewoners, professionals, beleidsmakers en festivalbezoekers naar alternatieven.</p>\r\n\r\n<p>Camping Kafka is een initiatief van de <a href="http://www.academievoorbeeldvorming.nl/" target="_blank">Academie voor Beeldvorming</a> in samenwerking met <a href="http://www.untold-stories.net/" target="_blank">Ruben Pater</a>.</p>\r\n\r\n<p><em>Graphic Matters</em><br />\r\nCamping Kafka is met een installatie en publieksprogramma te zien op het festival &lsquo;Graphic Matters&rsquo;. Dit festival vindt plaats in Breda van 22 september tot 22 oktober 2017. Je vindt ons voor het voormalig Breda&rsquo;s Museum op Parade 12.</p>	1	normal
\.


--
-- Name: kafka_section_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kafka
--

SELECT pg_catalog.setval('kafka_section_id_seq', 3, true);


--
-- Data for Name: kafka_worksession; Type: TABLE DATA; Schema: public; Owner: kafka
--

COPY kafka_worksession (id, documentation, event_id, title) FROM stdin;
\.


--
-- Name: kafka_worksession_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kafka
--

SELECT pg_catalog.setval('kafka_worksession_id_seq', 1, false);


--
-- Name: auth_group auth_group_name_key; Type: CONSTRAINT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY auth_group
    ADD CONSTRAINT auth_group_name_key UNIQUE (name);


--
-- Name: auth_group_permissions auth_group_permissions_group_id_permission_id_0cd325b0_uniq; Type: CONSTRAINT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_group_id_permission_id_0cd325b0_uniq UNIQUE (group_id, permission_id);


--
-- Name: auth_group_permissions auth_group_permissions_pkey; Type: CONSTRAINT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_pkey PRIMARY KEY (id);


--
-- Name: auth_group auth_group_pkey; Type: CONSTRAINT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY auth_group
    ADD CONSTRAINT auth_group_pkey PRIMARY KEY (id);


--
-- Name: auth_permission auth_permission_content_type_id_codename_01ab375a_uniq; Type: CONSTRAINT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY auth_permission
    ADD CONSTRAINT auth_permission_content_type_id_codename_01ab375a_uniq UNIQUE (content_type_id, codename);


--
-- Name: auth_permission auth_permission_pkey; Type: CONSTRAINT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY auth_permission
    ADD CONSTRAINT auth_permission_pkey PRIMARY KEY (id);


--
-- Name: auth_user_groups auth_user_groups_pkey; Type: CONSTRAINT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY auth_user_groups
    ADD CONSTRAINT auth_user_groups_pkey PRIMARY KEY (id);


--
-- Name: auth_user_groups auth_user_groups_user_id_group_id_94350c0c_uniq; Type: CONSTRAINT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY auth_user_groups
    ADD CONSTRAINT auth_user_groups_user_id_group_id_94350c0c_uniq UNIQUE (user_id, group_id);


--
-- Name: auth_user auth_user_pkey; Type: CONSTRAINT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY auth_user
    ADD CONSTRAINT auth_user_pkey PRIMARY KEY (id);


--
-- Name: auth_user_user_permissions auth_user_user_permissions_pkey; Type: CONSTRAINT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permissions_pkey PRIMARY KEY (id);


--
-- Name: auth_user_user_permissions auth_user_user_permissions_user_id_permission_id_14a6b632_uniq; Type: CONSTRAINT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permissions_user_id_permission_id_14a6b632_uniq UNIQUE (user_id, permission_id);


--
-- Name: auth_user auth_user_username_key; Type: CONSTRAINT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY auth_user
    ADD CONSTRAINT auth_user_username_key UNIQUE (username);


--
-- Name: django_admin_log django_admin_log_pkey; Type: CONSTRAINT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY django_admin_log
    ADD CONSTRAINT django_admin_log_pkey PRIMARY KEY (id);


--
-- Name: django_content_type django_content_type_app_label_model_76bd3d3b_uniq; Type: CONSTRAINT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY django_content_type
    ADD CONSTRAINT django_content_type_app_label_model_76bd3d3b_uniq UNIQUE (app_label, model);


--
-- Name: django_content_type django_content_type_pkey; Type: CONSTRAINT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY django_content_type
    ADD CONSTRAINT django_content_type_pkey PRIMARY KEY (id);


--
-- Name: django_migrations django_migrations_pkey; Type: CONSTRAINT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY django_migrations
    ADD CONSTRAINT django_migrations_pkey PRIMARY KEY (id);


--
-- Name: django_session django_session_pkey; Type: CONSTRAINT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY django_session
    ADD CONSTRAINT django_session_pkey PRIMARY KEY (session_key);


--
-- Name: kafka_config kafka_config_pkey; Type: CONSTRAINT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY kafka_config
    ADD CONSTRAINT kafka_config_pkey PRIMARY KEY (id);


--
-- Name: kafka_event kafka_event_pkey; Type: CONSTRAINT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY kafka_event
    ADD CONSTRAINT kafka_event_pkey PRIMARY KEY (id);


--
-- Name: kafka_news kafka_news_pkey; Type: CONSTRAINT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY kafka_news
    ADD CONSTRAINT kafka_news_pkey PRIMARY KEY (id);


--
-- Name: kafka_page kafka_page_pkey; Type: CONSTRAINT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY kafka_page
    ADD CONSTRAINT kafka_page_pkey PRIMARY KEY (id);


--
-- Name: kafka_page kafka_page_slug_key; Type: CONSTRAINT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY kafka_page
    ADD CONSTRAINT kafka_page_slug_key UNIQUE (slug);


--
-- Name: kafka_section kafka_section_pkey; Type: CONSTRAINT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY kafka_section
    ADD CONSTRAINT kafka_section_pkey PRIMARY KEY (id);


--
-- Name: kafka_worksession kafka_worksession_pkey; Type: CONSTRAINT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY kafka_worksession
    ADD CONSTRAINT kafka_worksession_pkey PRIMARY KEY (id);


--
-- Name: auth_group_name_a6ea08ec_like; Type: INDEX; Schema: public; Owner: kafka
--

CREATE INDEX auth_group_name_a6ea08ec_like ON auth_group USING btree (name varchar_pattern_ops);


--
-- Name: auth_group_permissions_group_id_b120cbf9; Type: INDEX; Schema: public; Owner: kafka
--

CREATE INDEX auth_group_permissions_group_id_b120cbf9 ON auth_group_permissions USING btree (group_id);


--
-- Name: auth_group_permissions_permission_id_84c5c92e; Type: INDEX; Schema: public; Owner: kafka
--

CREATE INDEX auth_group_permissions_permission_id_84c5c92e ON auth_group_permissions USING btree (permission_id);


--
-- Name: auth_permission_content_type_id_2f476e4b; Type: INDEX; Schema: public; Owner: kafka
--

CREATE INDEX auth_permission_content_type_id_2f476e4b ON auth_permission USING btree (content_type_id);


--
-- Name: auth_user_groups_group_id_97559544; Type: INDEX; Schema: public; Owner: kafka
--

CREATE INDEX auth_user_groups_group_id_97559544 ON auth_user_groups USING btree (group_id);


--
-- Name: auth_user_groups_user_id_6a12ed8b; Type: INDEX; Schema: public; Owner: kafka
--

CREATE INDEX auth_user_groups_user_id_6a12ed8b ON auth_user_groups USING btree (user_id);


--
-- Name: auth_user_user_permissions_permission_id_1fbb5f2c; Type: INDEX; Schema: public; Owner: kafka
--

CREATE INDEX auth_user_user_permissions_permission_id_1fbb5f2c ON auth_user_user_permissions USING btree (permission_id);


--
-- Name: auth_user_user_permissions_user_id_a95ead1b; Type: INDEX; Schema: public; Owner: kafka
--

CREATE INDEX auth_user_user_permissions_user_id_a95ead1b ON auth_user_user_permissions USING btree (user_id);


--
-- Name: auth_user_username_6821ab7c_like; Type: INDEX; Schema: public; Owner: kafka
--

CREATE INDEX auth_user_username_6821ab7c_like ON auth_user USING btree (username varchar_pattern_ops);


--
-- Name: django_admin_log_content_type_id_c4bce8eb; Type: INDEX; Schema: public; Owner: kafka
--

CREATE INDEX django_admin_log_content_type_id_c4bce8eb ON django_admin_log USING btree (content_type_id);


--
-- Name: django_admin_log_user_id_c564eba6; Type: INDEX; Schema: public; Owner: kafka
--

CREATE INDEX django_admin_log_user_id_c564eba6 ON django_admin_log USING btree (user_id);


--
-- Name: django_session_expire_date_a5c62663; Type: INDEX; Schema: public; Owner: kafka
--

CREATE INDEX django_session_expire_date_a5c62663 ON django_session USING btree (expire_date);


--
-- Name: django_session_session_key_c0390e0f_like; Type: INDEX; Schema: public; Owner: kafka
--

CREATE INDEX django_session_session_key_c0390e0f_like ON django_session USING btree (session_key varchar_pattern_ops);


--
-- Name: kafka_page_slug_d84a9eb9_like; Type: INDEX; Schema: public; Owner: kafka
--

CREATE INDEX kafka_page_slug_d84a9eb9_like ON kafka_page USING btree (slug varchar_pattern_ops);


--
-- Name: kafka_section_page_id_da258fb5; Type: INDEX; Schema: public; Owner: kafka
--

CREATE INDEX kafka_section_page_id_da258fb5 ON kafka_section USING btree (page_id);


--
-- Name: kafka_worksession_event_id_8f4e05ab; Type: INDEX; Schema: public; Owner: kafka
--

CREATE INDEX kafka_worksession_event_id_8f4e05ab ON kafka_worksession USING btree (event_id);


--
-- Name: auth_group_permissions auth_group_permissio_permission_id_84c5c92e_fk_auth_perm; Type: FK CONSTRAINT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY auth_group_permissions
    ADD CONSTRAINT auth_group_permissio_permission_id_84c5c92e_fk_auth_perm FOREIGN KEY (permission_id) REFERENCES auth_permission(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_group_permissions auth_group_permissions_group_id_b120cbf9_fk_auth_group_id; Type: FK CONSTRAINT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_group_id_b120cbf9_fk_auth_group_id FOREIGN KEY (group_id) REFERENCES auth_group(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_permission auth_permission_content_type_id_2f476e4b_fk_django_co; Type: FK CONSTRAINT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY auth_permission
    ADD CONSTRAINT auth_permission_content_type_id_2f476e4b_fk_django_co FOREIGN KEY (content_type_id) REFERENCES django_content_type(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_user_groups auth_user_groups_group_id_97559544_fk_auth_group_id; Type: FK CONSTRAINT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY auth_user_groups
    ADD CONSTRAINT auth_user_groups_group_id_97559544_fk_auth_group_id FOREIGN KEY (group_id) REFERENCES auth_group(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_user_groups auth_user_groups_user_id_6a12ed8b_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY auth_user_groups
    ADD CONSTRAINT auth_user_groups_user_id_6a12ed8b_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_user_user_permissions auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm; Type: FK CONSTRAINT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm FOREIGN KEY (permission_id) REFERENCES auth_permission(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_user_user_permissions auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: django_admin_log django_admin_log_content_type_id_c4bce8eb_fk_django_co; Type: FK CONSTRAINT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY django_admin_log
    ADD CONSTRAINT django_admin_log_content_type_id_c4bce8eb_fk_django_co FOREIGN KEY (content_type_id) REFERENCES django_content_type(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: django_admin_log django_admin_log_user_id_c564eba6_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY django_admin_log
    ADD CONSTRAINT django_admin_log_user_id_c564eba6_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: kafka_section kafka_section_page_id_da258fb5_fk_kafka_page_id; Type: FK CONSTRAINT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY kafka_section
    ADD CONSTRAINT kafka_section_page_id_da258fb5_fk_kafka_page_id FOREIGN KEY (page_id) REFERENCES kafka_page(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: kafka_worksession kafka_worksession_event_id_8f4e05ab_fk_kafka_event_id; Type: FK CONSTRAINT; Schema: public; Owner: kafka
--

ALTER TABLE ONLY kafka_worksession
    ADD CONSTRAINT kafka_worksession_event_id_8f4e05ab_fk_kafka_event_id FOREIGN KEY (event_id) REFERENCES kafka_event(id) DEFERRABLE INITIALLY DEFERRED;


--
-- PostgreSQL database dump complete
--

